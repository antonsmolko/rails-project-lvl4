[
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-calc.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/games/calc.js\"",
        "line": 3,
        "column": 18,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport calc from '../src/games/calc.js';\n\ncalc();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-even.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/games/even.js\"",
        "line": 3,
        "column": 18,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport even from '../src/games/even.js';\n\neven();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-games.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/cli.js\"",
        "line": 3,
        "column": 17,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport cli from '../src/cli.js';\n\ncli();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-gcd.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/games/gcd.js\"",
        "line": 3,
        "column": 17,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport gcd from '../src/games/gcd.js';\n\ngcd();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-prime.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/games/prime.js\"",
        "line": 3,
        "column": 19,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport prime from '../src/games/prime.js';\n\nprime();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/bin/brain-progression.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../src/games/progression.js\"",
        "line": 3,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 54
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nimport progression from '../src/games/progression.js';\n\nprogression();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/cli.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'promptly'.",
        "line": 1,
        "column": 22,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 4,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 4,
        "endColumn": 14
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 6,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 6,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import promptly from 'promptly';\n\nexport default async () =\u003e {\n  console.log('Welcome to the Brain Games!');\n  const answer = await promptly.prompt('May I have your name?');\n  console.log('Hello,', answer);\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/games/calc.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../index.js\"",
        "line": 1,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 33
      },
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../helpers/getRandom.js\"",
        "line": 2,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import engine from '../index.js';\nimport getRandom from '../helpers/getRandom.js';\n\n/**\n * An objects that contains the signed string of the operatioin as key\n * and a function to calculate the operation as a value\n *\n * @constant {Object}\n */\nconst calcMap = {\n  '+': (num1, num2) =\u003e num1 + num2,\n  '-': (num1, num2) =\u003e num1 - num2,\n  '*': (num1, num2) =\u003e num1 * num2,\n};\n\n/**\n * Returns array of calcMap keys\n *\n * @return {array}\n */\nconst operations = Object.keys(calcMap);\n\n/**\n * Returned calculation result\n *\n * @param {number} num1 first number\n * @param {number} num2 second number\n * @param {string} operation calculation operation sign\n *\n * @return {number} calculation result\n */\nconst getAnswer = (num1, num2, operation) =\u003e (\n  calcMap[operation](num1, num2)\n);\n\n/**\n * Game description\n *\n * @constant {string}\n */\nconst description = 'What is the result of the expression?';\n\n/**\n * Brain Calc\n * the user must solve the expression\n *\n * @param {number} range rande of valid values of numbers from 0\n *\n * @returns {Object} next round game state\n * @returns {string} round condition: mathematical expression\n * @returns {string} round expected answer: the result of evaluating an expression\n */\nconst generateRound = (range = 100) =\u003e {\n  const operationIndex = getRandom(operations.length - 1);\n  const operation = operations[operationIndex];\n  const num1 = getRandom(range);\n  const num2 = getRandom(range);\n\n  return {\n    question: `${num1} ${operation} ${num2}`,\n    expectedAnswer: getAnswer(num1, num2, operation).toString(),\n  };\n};\n\nexport default engine(\n  generateRound,\n  description,\n);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/games/even.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../index.js\"",
        "line": 1,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 33
      },
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../helpers/getRandom.js\"",
        "line": 2,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import engine from '../index.js';\nimport getRandom from '../helpers/getRandom.js';\n\n/**\n * Game description\n *\n * @constant {string}\n */\nconst description = 'Answer \"yes\" if the number is even, otherwise answer \"no\".';\n\n/**\n * Return boolen value of the result of comparing a number with an even type\n *\n * @param {number} num\n *\n * @return {boolean}\n */\nconst isEven = (num) =\u003e num % 2 === 0;\n\n/**\n * Brain Even\n * the user must determine if the number is even\n *\n * @param {number} range rande of valid values of numbers from 0\n *\n * @returns {Object} next round game state\n * @returns {number} round condition: random number\n * @returns {string} round expected answer: 'yes', 'no'\n */\nconst generateRound = (range = 100) =\u003e {\n  const number = getRandom(range);\n\n  return {\n    question: number,\n    expectedAnswer: isEven(number) ? 'yes' : 'no',\n  };\n};\n\nexport default engine(\n  generateRound,\n  description,\n);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/games/gcd.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../index.js\"",
        "line": 1,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 33
      },
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../helpers/getRandom.js\"",
        "line": 2,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import engine from '../index.js';\nimport getRandom from '../helpers/getRandom.js';\n\n/**\n * Euclid GCD\n * calculate the greatest common divisor\n *\n * @param {number} min fewer value\n * @param {number} max more value\n * @return {number} greatest common factor of @param min and @param max\n */\nconst getGcd = (min, max) =\u003e {\n  const diff = max % min;\n  if (diff === 0) return min;\n\n  return getGcd(diff, min);\n};\n\n/**\n * Game description\n *\n * @constant {string}\n */\nconst description = 'Find the greatest common divisor of given numbers.';\n\n/**\n * Brain GCD\n * the user must calculate the greatest common divisor\n * of two numbers\n *\n * @param {number} range rande of valid values of numbers from 0\n *\n * @returns {Object} next round game state\n * @returns {string} round condition: two random numbers\n * @returns {string} round expected answer: greatest common divisor of these numbers\n */\nconst generateRound = (range = 100) =\u003e {\n  const num1 = getRandom(range, 1);\n  const num2 = getRandom(range, 1);\n  const [min, max] = [num1, num2].sort();\n\n  return {\n    question: `${num1} ${num2}`,\n    expectedAnswer: getGcd(min, max).toString(),\n  };\n};\n\nexport default engine(\n  generateRound,\n  description,\n);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/games/prime.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../index.js\"",
        "line": 1,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 33
      },
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../helpers/getRandom.js\"",
        "line": 2,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import engine from '../index.js';\nimport getRandom from '../helpers/getRandom.js';\n\n/**\n * Determines whether a number is prime\n *\n * @param {number} number\n *\n * @return {boolean}\n */\nconst isPrime = (number) =\u003e {\n  if (number \u003c 2) return false;\n  if (number % 2 === 0) return number === 2;\n  if (number % 3 === 0) return number === 3;\n\n  for (let i = 5; i * i \u003c= number; i += 6) {\n    if (number % i === 0 || number % (i + 2) === 0) return false;\n  }\n\n  return true;\n};\n\n/**\n * Game description\n *\n * @constant {string}\n */\nconst description = 'Answer \"yes\" if given number is prime. Otherwise answer \"no\".';\n\n/**\n * Brain Prime\n * the user must determine if the number is prime\n *\n * @param {number} range rande of valid values of numbers from 0\n *\n * @returns {Object} next round game state\n * @returns {number} round condition: random number\n * @returns {string} round expected answer: 'yes', 'no'\n */\nconst generateRound = (range = 100) =\u003e {\n  const number = getRandom(range, 2);\n\n  return {\n    question: number,\n    expectedAnswer: isPrime(number) ? 'yes' : 'no',\n  };\n};\n\nexport default engine(\n  generateRound,\n  description,\n);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/games/progression.js",
    "messages": [
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../index.js\"",
        "line": 1,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 33
      },
      {
        "ruleId": "import/extensions",
        "severity": 2,
        "message": "Unexpected use of file extension \"js\" for \"../helpers/getRandom.js\"",
        "line": 2,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import engine from '../index.js';\nimport getRandom from '../helpers/getRandom.js';\n\n/**\n * Returns a random arithmetic progression\n *\n * @param {number} start a number at which the arithmetic progression starts\n * @param {number} step a value of arithmetic progression step\n * @param {number} length a value of arithmetic progression length\n *\n * @return {array} an array whose values a numbers forming an arithmetic progression\n */\nconst generateProgression = (start, step, length) =\u003e {\n  const result = [];\n  for (let i = 0; i \u003c length; i += 1) {\n    const next = i === 0 ? start : result[i - 1] + step;\n    result.push(next);\n  }\n\n  return result;\n};\n\n/**\n * Game description\n *\n * @constant {string}\n */\nconst description = 'What number is missing in the progression?';\n\n/**\n * Number of element in arithmetic progression\n *\n * @const {number}\n */\nconst progressionLength = 10;\n\n/**\n * Brain Progression\n * the user has to calculate the missing value\n * of the arithmetic progression\n *\n * @returns {Object} next round game state\n * @returns {string} round condition: arithmetic progression with random hidden element\n * @returns {string} round expected answer: value of hidden element\n */\nconst generateRound = () =\u003e {\n  const start = getRandom(30);\n  const step = getRandom(20, 3);\n\n  const progression = generateProgression(start, step, progressionLength);\n  const hiddenIndex = getRandom(progressionLength - 1);\n  const expectedAnswer = progression\n    .splice(hiddenIndex, 1, '..')\n    .toString();\n\n  return {\n    question: progression.join(' '),\n    expectedAnswer,\n  };\n};\n\nexport default engine(\n  generateRound,\n  description,\n);\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/helpers/getRandom.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/smol/Documents/WEB/LESSONS/Hexlet/ruby/projects/rails-project-lvl4/tmp/repos/antonsmolko/frontend-project-lvl1/src/index.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'promptly'.",
        "line": 1,
        "column": 22,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 19,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 19,
        "endColumn": 16
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 20,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 20,
        "endColumn": 16
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 26,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 26,
        "endColumn": 18
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 29,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 29,
        "endColumn": 20
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 31,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 31,
        "endColumn": 20
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 32,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 32,
        "endColumn": 20
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 37,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 37,
        "endColumn": 16
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "no-await-in-loop",
        "severity": 2,
        "message": "Unexpected `await` inside a loop.",
        "line": 25,
        "column": 26,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 25,
        "endColumn": 72,
        "suppressions": [
          {
            "kind": "directive",
            "justification": ""
          }
        ]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import promptly from 'promptly';\n\n/**\n * Number of game rounds\n * @constant {number}\n */\nconst roundsCount = 3;\n\n/**\n * Game engine\n *\n * @param {Object} options\n * @param {function} options.generateRound function with logic of the specific engine\n * @param {string} options.descriptions game rule description\n */\nexport default (generateRound, descriptions) =\u003e async () =\u003e {\n  try {\n    const name = await promptly.prompt('May I have your name?');\n    console.log(`Hello, ${name}!`);\n    console.log(descriptions);\n\n    for (let i = 1; i \u003c= roundsCount; i += 1) {\n      const { question, expectedAnswer } = generateRound();\n      // eslint-disable-next-line no-await-in-loop\n      const userAnswer = await promptly.prompt(`Question: ${question}`);\n      console.log('You answer:', userAnswer);\n\n      if (userAnswer === expectedAnswer) {\n        console.log('Correct!');\n      } else {\n        console.log(`\"${userAnswer}\" is wrong answer ;(. Correct answer was \"${expectedAnswer}\".`);\n        console.log(`Let's try again, ${name}!`);\n        return;\n      }\n    }\n\n    console.log(`Congratulations, ${name}!`);\n  } catch (error) {\n    console.log('exit');\n  }\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  }
]